
#include <iostream>

//частиично подключаю нужные элементы пространства имен std
using std::cin;
using std::cout;
using std::string;

//-----------------------------------------------------------------------------------------------------------
// блок глобальных переменных
    string path = "";                   // считываемый путь для рабочей диреткории
    string absolute_path = "";          // абсолютный путь до файла в рабочей директории // РАССМОТРЕТЬ строковый массив? для ряда дублей.
    string fine_name = "";              //имя файла

    string hash = "";                   // строковая переменная под значение хэшсуммы
    
    bool double_fact = false;           // бинарная переменная для фиксации факта дубля. тру - файл признан дублем
    
    unsigned __int64 freed_mem = 0;    // количество байт освобожденной памяти. УБЕДИТЬСЯ что будет подсчет из метаданных идти по байтам. Максимум 18 446 744 073 709 551 615
    unsigned __int16 file_mem = 0;      // сколько весит конкретный файл
    unsigned __int16 deleted_ctr = 0;  // счетчик удаленных файлов
    unsigned __int8 current_doubles = 0;// количество дублей для конкретного файла

    string file_date = "";              // часть метаданных файла. хранит дату создания файла. ОПРЕДЕЛИТЬ как будет вестись сравнение дат создания файлов. может просто брать число секунд и считать разницу?

//-----------------------------------------------------------------------------------------------------------
/// <summary>
///     функция считывания из cli пути, по которому нужно работать скрипты
/// 
///  TBD   добавить обработку исключений внутри функции
/// </summary>
/// <returns></returns>
///     возвращает строку с директорией
string get_path () {

    return path;
}

string calc_hash(string/*абсолюный путь к файлу*/) {

    // hash = hash_func (/*абсолютный путь*/);

    return hash;
}

//функция проверки на дубль
bool is_double() {

    calc_hash(absolute_path);
    current_doubles++;

    return double_fact; // возвращает тру или фалсе
}

// эта функция удаляет файл, на вход получает абсолютный путь. используется в другой функции.
void delete_file(string) {

    
}

void delete_doubles(/*сюда подавать путь до удаляемых файлов. нефиг гонять файлы по проге туда-сюда*/) {

    if (is_double) {

        freed_mem += file_mem; // перед удалением файла пишем сколько он весит

        delete_file(absolute_path);
        deleted_ctr++;

    }
}

void main()
{
    get_path(); //получили путь, обработали исключения внутри функции


    std::cout << "Hello World!\n";
}

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.